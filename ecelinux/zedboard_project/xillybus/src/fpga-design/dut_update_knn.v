// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.2
// Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dut_update_knn (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        test_inst_V,
        train_inst_V,
        min_distances_V_address0,
        min_distances_V_ce0,
        min_distances_V_we0,
        min_distances_V_d0,
        min_distances_V_q0,
        tmp_34
);

parameter    ap_ST_st1_fsm_0 = 5'b1;
parameter    ap_ST_st2_fsm_1 = 5'b10;
parameter    ap_ST_st3_fsm_2 = 5'b100;
parameter    ap_ST_st4_fsm_3 = 5'b1000;
parameter    ap_ST_st5_fsm_4 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv6_31 = 6'b110001;
parameter    ap_const_lv6_1 = 6'b1;
parameter    ap_const_lv32_30 = 32'b110000;
parameter    ap_const_lv2_3 = 2'b11;
parameter    ap_const_lv2_1 = 2'b1;
parameter    ap_const_lv6_32 = 6'b110010;
parameter    ap_const_lv2_2 = 2'b10;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [48:0] test_inst_V;
input  [47:0] train_inst_V;
output  [4:0] min_distances_V_address0;
output   min_distances_V_ce0;
output   min_distances_V_we0;
output  [5:0] min_distances_V_d0;
input  [5:0] min_distances_V_q0;
input  [3:0] tmp_34;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[4:0] min_distances_V_address0;
reg min_distances_V_ce0;
reg min_distances_V_we0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
reg    ap_sig_cseq_ST_st1_fsm_0;
reg    ap_sig_22;
wire   [5:0] tmp_s_fu_152_p2;
reg   [5:0] tmp_s_reg_298;
wire   [48:0] r_V_2_fu_162_p2;
wire   [5:0] i_1_fu_174_p2;
reg    ap_sig_cseq_ST_st2_fsm_1;
reg    ap_sig_52;
wire   [31:0] dist_0_s_fu_190_p3;
wire   [0:0] exitcond_fu_168_p2;
wire   [48:0] r_V_4_fu_208_p1;
wire   [0:0] tmp_5_fu_212_p2;
reg   [0:0] tmp_5_reg_327;
reg    ap_sig_cseq_ST_st3_fsm_2;
reg    ap_sig_69;
wire   [1:0] i_2_fu_218_p2;
reg   [1:0] i_2_reg_331;
reg   [4:0] min_distances_V_addr_reg_337;
wire   [0:0] tmp_8_fu_242_p2;
reg   [0:0] tmp_8_reg_342;
reg    ap_sig_cseq_ST_st4_fsm_3;
reg    ap_sig_84;
wire   [0:0] tmp_4_fu_261_p2;
reg   [0:0] tmp_4_reg_352;
reg   [48:0] p_s_reg_96;
reg   [31:0] val_assign_reg_105;
reg   [5:0] i_reg_117;
reg   [1:0] i1_reg_128;
reg    ap_sig_cseq_ST_st5_fsm_4;
reg    ap_sig_107;
wire   [0:0] or_cond_fu_288_p2;
wire   [0:0] demorgan_fu_277_p2;
wire  signed [63:0] tmp_13_cast_fu_233_p1;
wire  signed [63:0] tmp_14_cast_fu_256_p1;
wire   [5:0] tmp_fu_144_p3;
wire   [5:0] tmp_34_cast_cast_fu_140_p1;
wire   [48:0] train_inst_V_cast_fu_158_p1;
wire   [0:0] r_V_fu_180_p1;
wire   [31:0] dist_fu_184_p2;
wire   [47:0] r_V_3_fu_198_p4;
wire   [5:0] tmp_6_cast_fu_224_p1;
wire   [5:0] tmp_3_fu_228_p2;
wire   [31:0] tmp_7_fu_238_p1;
wire   [5:0] tmp_cast_fu_248_p1;
wire   [5:0] tmp_6_fu_251_p2;
wire   [31:0] tmp_2_fu_267_p1;
wire   [0:0] slt_fu_271_p2;
wire   [0:0] tmp_1_fu_282_p2;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_st1_fsm_0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & ~(exitcond_fu_168_p2 == 1'b0))) begin
        i1_reg_128 <= ap_const_lv2_0;
    end else if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (((1'b0 == or_cond_fu_288_p2) & (1'b0 == tmp_5_reg_327) & (1'b0 == tmp_8_reg_342)) | ((1'b0 == or_cond_fu_288_p2) & (1'b0 == tmp_5_reg_327) & ~(1'b0 == demorgan_fu_277_p2))))) begin
        i1_reg_128 <= i_2_reg_331;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_168_p2 == 1'b0))) begin
        i_reg_117 <= i_1_fu_174_p2;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        i_reg_117 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_168_p2 == 1'b0))) begin
        p_s_reg_96 <= r_V_4_fu_208_p1;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        p_s_reg_96 <= r_V_2_fu_162_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st2_fsm_1) & (exitcond_fu_168_p2 == 1'b0))) begin
        val_assign_reg_105 <= dist_0_s_fu_190_p3;
    end else if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        val_assign_reg_105 <= ap_const_lv32_0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        i_2_reg_331 <= i_2_fu_218_p2;
        tmp_5_reg_327 <= tmp_5_fu_212_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) & (1'b0 == tmp_5_fu_212_p2))) begin
        min_distances_V_addr_reg_337 <= tmp_13_cast_fu_233_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st4_fsm_3) & ~(1'b0 == tmp_8_fu_242_p2))) begin
        tmp_4_reg_352 <= tmp_4_fu_261_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        tmp_8_reg_342 <= tmp_8_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_sig_cseq_ST_st1_fsm_0) & ~(ap_start == 1'b0))) begin
        tmp_s_reg_298 <= tmp_s_fu_152_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0)) | ((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (~(1'b0 == or_cond_fu_288_p2) | ~(1'b0 == tmp_5_reg_327) | ((1'b0 == demorgan_fu_277_p2) & ~(1'b0 == tmp_8_reg_342)))))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_sig_cseq_ST_st1_fsm_0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (~(1'b0 == or_cond_fu_288_p2) | ~(1'b0 == tmp_5_reg_327) | ((1'b0 == demorgan_fu_277_p2) & ~(1'b0 == tmp_8_reg_342))))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_22) begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st1_fsm_0 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_52) begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st2_fsm_1 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_69) begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st3_fsm_2 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_84) begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st4_fsm_3 = 1'b0;
    end
end

always @ (*) begin
    if (ap_sig_107) begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b1;
    end else begin
        ap_sig_cseq_ST_st5_fsm_4 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_sig_cseq_ST_st5_fsm_4)) begin
        min_distances_V_address0 = min_distances_V_addr_reg_337;
    end else if ((1'b1 == ap_sig_cseq_ST_st4_fsm_3)) begin
        min_distances_V_address0 = tmp_14_cast_fu_256_p1;
    end else if ((1'b1 == ap_sig_cseq_ST_st3_fsm_2)) begin
        min_distances_V_address0 = tmp_13_cast_fu_233_p1;
    end else begin
        min_distances_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st3_fsm_2) | (1'b1 == ap_sig_cseq_ST_st4_fsm_3) | (1'b1 == ap_sig_cseq_ST_st5_fsm_4))) begin
        min_distances_V_ce0 = 1'b1;
    end else begin
        min_distances_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_sig_cseq_ST_st5_fsm_4) & (((1'b0 == tmp_5_reg_327) & ~(1'b0 == or_cond_fu_288_p2)) | ((1'b0 == tmp_5_reg_327) & (1'b0 == demorgan_fu_277_p2) & ~(1'b0 == tmp_8_reg_342))))) begin
        min_distances_V_we0 = 1'b1;
    end else begin
        min_distances_V_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_st1_fsm_0 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end
        end
        ap_ST_st2_fsm_1 : begin
            if ((exitcond_fu_168_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_st2_fsm_1;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        ap_ST_st3_fsm_2 : begin
            if (~(1'b0 == tmp_5_fu_212_p2)) begin
                ap_NS_fsm = ap_ST_st5_fsm_4;
            end else begin
                ap_NS_fsm = ap_ST_st4_fsm_3;
            end
        end
        ap_ST_st4_fsm_3 : begin
            ap_NS_fsm = ap_ST_st5_fsm_4;
        end
        ap_ST_st5_fsm_4 : begin
            if ((~(1'b0 == or_cond_fu_288_p2) | ~(1'b0 == tmp_5_reg_327) | ((1'b0 == demorgan_fu_277_p2) & ~(1'b0 == tmp_8_reg_342)))) begin
                ap_NS_fsm = ap_ST_st1_fsm_0;
            end else begin
                ap_NS_fsm = ap_ST_st3_fsm_2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

always @ (*) begin
    ap_sig_107 = (1'b1 == ap_CS_fsm[ap_const_lv32_4]);
end

always @ (*) begin
    ap_sig_22 = (ap_CS_fsm[ap_const_lv32_0] == 1'b1);
end

always @ (*) begin
    ap_sig_52 = (1'b1 == ap_CS_fsm[ap_const_lv32_1]);
end

always @ (*) begin
    ap_sig_69 = (1'b1 == ap_CS_fsm[ap_const_lv32_2]);
end

always @ (*) begin
    ap_sig_84 = (1'b1 == ap_CS_fsm[ap_const_lv32_3]);
end

assign demorgan_fu_277_p2 = (slt_fu_271_p2 & tmp_4_reg_352);

assign dist_0_s_fu_190_p3 = ((r_V_fu_180_p1[0:0] === 1'b1) ? dist_fu_184_p2 : val_assign_reg_105);

assign dist_fu_184_p2 = (ap_const_lv32_1 + val_assign_reg_105);

assign exitcond_fu_168_p2 = ((i_reg_117 == ap_const_lv6_31) ? 1'b1 : 1'b0);

assign i_1_fu_174_p2 = (i_reg_117 + ap_const_lv6_1);

assign i_2_fu_218_p2 = (i1_reg_128 + ap_const_lv2_1);

assign min_distances_V_d0 = val_assign_reg_105[5:0];

assign or_cond_fu_288_p2 = (tmp_8_reg_342 & tmp_1_fu_282_p2);

assign r_V_2_fu_162_p2 = (train_inst_V_cast_fu_158_p1 ^ test_inst_V);

assign r_V_3_fu_198_p4 = {{p_s_reg_96[ap_const_lv32_30 : ap_const_lv32_1]}};

assign r_V_4_fu_208_p1 = r_V_3_fu_198_p4;

assign r_V_fu_180_p1 = p_s_reg_96[0:0];

assign slt_fu_271_p2 = (($signed(val_assign_reg_105) < $signed(tmp_2_fu_267_p1)) ? 1'b1 : 1'b0);

assign tmp_13_cast_fu_233_p1 = $signed(tmp_3_fu_228_p2);

assign tmp_14_cast_fu_256_p1 = $signed(tmp_6_fu_251_p2);

assign tmp_1_fu_282_p2 = ((i1_reg_128 == ap_const_lv2_2) ? 1'b1 : 1'b0);

assign tmp_2_fu_267_p1 = min_distances_V_q0;

assign tmp_34_cast_cast_fu_140_p1 = tmp_34;

assign tmp_3_fu_228_p2 = (tmp_s_reg_298 + tmp_6_cast_fu_224_p1);

assign tmp_4_fu_261_p2 = ((min_distances_V_q0 != ap_const_lv6_32) ? 1'b1 : 1'b0);

assign tmp_5_fu_212_p2 = ((i1_reg_128 == ap_const_lv2_3) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_224_p1 = i1_reg_128;

assign tmp_6_fu_251_p2 = (tmp_s_reg_298 + tmp_cast_fu_248_p1);

assign tmp_7_fu_238_p1 = min_distances_V_q0;

assign tmp_8_fu_242_p2 = (($signed(val_assign_reg_105) < $signed(tmp_7_fu_238_p1)) ? 1'b1 : 1'b0);

assign tmp_cast_fu_248_p1 = i_2_reg_331;

assign tmp_fu_144_p3 = {{tmp_34}, {ap_const_lv2_0}};

assign tmp_s_fu_152_p2 = (tmp_fu_144_p3 - tmp_34_cast_cast_fu_140_p1);

assign train_inst_V_cast_fu_158_p1 = train_inst_V;

endmodule //dut_update_knn
