-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.2
-- Copyright (C) 1986-2016 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dut_update_knn is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    test_inst_V : IN STD_LOGIC_VECTOR (48 downto 0);
    train_inst_V : IN STD_LOGIC_VECTOR (47 downto 0);
    min_distances_V_address0 : OUT STD_LOGIC_VECTOR (4 downto 0);
    min_distances_V_ce0 : OUT STD_LOGIC;
    min_distances_V_we0 : OUT STD_LOGIC;
    min_distances_V_d0 : OUT STD_LOGIC_VECTOR (5 downto 0);
    min_distances_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
    tmp_34 : IN STD_LOGIC_VECTOR (3 downto 0) );
end;


architecture behav of dut_update_knn is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_st1_fsm_0 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_st2_fsm_1 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_st3_fsm_2 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_st4_fsm_3 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_st5_fsm_4 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv6_32 : STD_LOGIC_VECTOR (5 downto 0) := "110010";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_sig_cseq_ST_st1_fsm_0 : STD_LOGIC;
    signal ap_sig_22 : BOOLEAN;
    signal tmp_s_fu_152_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_s_reg_298 : STD_LOGIC_VECTOR (5 downto 0);
    signal r_V_2_fu_162_p2 : STD_LOGIC_VECTOR (48 downto 0);
    signal i_1_fu_174_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_sig_cseq_ST_st2_fsm_1 : STD_LOGIC;
    signal ap_sig_52 : BOOLEAN;
    signal dist_0_s_fu_190_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_168_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_V_4_fu_208_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal tmp_5_fu_212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_5_reg_327 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st3_fsm_2 : STD_LOGIC;
    signal ap_sig_69 : BOOLEAN;
    signal i_2_fu_218_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_2_reg_331 : STD_LOGIC_VECTOR (1 downto 0);
    signal min_distances_V_addr_reg_337 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_8_reg_342 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_sig_cseq_ST_st4_fsm_3 : STD_LOGIC;
    signal ap_sig_84 : BOOLEAN;
    signal tmp_4_fu_261_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_reg_352 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_s_reg_96 : STD_LOGIC_VECTOR (48 downto 0);
    signal val_assign_reg_105 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_117 : STD_LOGIC_VECTOR (5 downto 0);
    signal i1_reg_128 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_sig_cseq_ST_st5_fsm_4 : STD_LOGIC;
    signal ap_sig_107 : BOOLEAN;
    signal or_cond_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal demorgan_fu_277_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_cast_fu_233_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_256_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_144_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_34_cast_cast_fu_140_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal train_inst_V_cast_fu_158_p1 : STD_LOGIC_VECTOR (48 downto 0);
    signal r_V_fu_180_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal dist_fu_184_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_3_fu_198_p4 : STD_LOGIC_VECTOR (47 downto 0);
    signal tmp_6_cast_fu_224_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_228_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_238_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_cast_fu_248_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_6_fu_251_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_2_fu_267_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal slt_fu_271_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_st1_fsm_0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i1_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and not((exitcond_fu_168_p2 = ap_const_lv1_0)))) then 
                i1_reg_128 <= ap_const_lv2_0;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (((ap_const_lv1_0 = or_cond_fu_288_p2) and (ap_const_lv1_0 = tmp_5_reg_327) and (ap_const_lv1_0 = tmp_8_reg_342)) or ((ap_const_lv1_0 = or_cond_fu_288_p2) and (ap_const_lv1_0 = tmp_5_reg_327) and not((ap_const_lv1_0 = demorgan_fu_277_p2)))))) then 
                i1_reg_128 <= i_2_reg_331;
            end if; 
        end if;
    end process;

    i_reg_117_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_168_p2 = ap_const_lv1_0))) then 
                i_reg_117 <= i_1_fu_174_p2;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                i_reg_117 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    p_s_reg_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_168_p2 = ap_const_lv1_0))) then 
                p_s_reg_96 <= r_V_4_fu_208_p1;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                p_s_reg_96 <= r_V_2_fu_162_p2;
            end if; 
        end if;
    end process;

    val_assign_reg_105_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st2_fsm_1) and (exitcond_fu_168_p2 = ap_const_lv1_0))) then 
                val_assign_reg_105 <= dist_0_s_fu_190_p3;
            elsif (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then 
                val_assign_reg_105 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then
                i_2_reg_331 <= i_2_fu_218_p2;
                tmp_5_reg_327 <= tmp_5_fu_212_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) and (ap_const_lv1_0 = tmp_5_fu_212_p2))) then
                min_distances_V_addr_reg_337 <= tmp_13_cast_fu_233_p1(5 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) and not((ap_const_lv1_0 = tmp_8_fu_242_p2)))) then
                tmp_4_reg_352 <= tmp_4_fu_261_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then
                tmp_8_reg_342 <= tmp_8_fu_242_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0) and not((ap_start = ap_const_logic_0)))) then
                tmp_s_reg_298 <= tmp_s_fu_152_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, exitcond_fu_168_p2, tmp_5_fu_212_p2, tmp_5_reg_327, tmp_8_reg_342, or_cond_fu_288_p2, demorgan_fu_277_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_st1_fsm_0 => 
                if (not((ap_start = ap_const_logic_0))) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                end if;
            when ap_ST_st2_fsm_1 => 
                if ((exitcond_fu_168_p2 = ap_const_lv1_0)) then
                    ap_NS_fsm <= ap_ST_st2_fsm_1;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when ap_ST_st3_fsm_2 => 
                if (not((ap_const_lv1_0 = tmp_5_fu_212_p2))) then
                    ap_NS_fsm <= ap_ST_st5_fsm_4;
                else
                    ap_NS_fsm <= ap_ST_st4_fsm_3;
                end if;
            when ap_ST_st4_fsm_3 => 
                ap_NS_fsm <= ap_ST_st5_fsm_4;
            when ap_ST_st5_fsm_4 => 
                if ((not((ap_const_lv1_0 = or_cond_fu_288_p2)) or not((ap_const_lv1_0 = tmp_5_reg_327)) or ((ap_const_lv1_0 = demorgan_fu_277_p2) and not((ap_const_lv1_0 = tmp_8_reg_342))))) then
                    ap_NS_fsm <= ap_ST_st1_fsm_0;
                else
                    ap_NS_fsm <= ap_ST_st3_fsm_2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;

    ap_done_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0, tmp_5_reg_327, tmp_8_reg_342, ap_sig_cseq_ST_st5_fsm_4, or_cond_fu_288_p2, demorgan_fu_277_p2)
    begin
        if ((((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0)) or ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (not((ap_const_lv1_0 = or_cond_fu_288_p2)) or not((ap_const_lv1_0 = tmp_5_reg_327)) or ((ap_const_lv1_0 = demorgan_fu_277_p2) and not((ap_const_lv1_0 = tmp_8_reg_342))))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_sig_cseq_ST_st1_fsm_0)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_sig_cseq_ST_st1_fsm_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_5_reg_327, tmp_8_reg_342, ap_sig_cseq_ST_st5_fsm_4, or_cond_fu_288_p2, demorgan_fu_277_p2)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (not((ap_const_lv1_0 = or_cond_fu_288_p2)) or not((ap_const_lv1_0 = tmp_5_reg_327)) or ((ap_const_lv1_0 = demorgan_fu_277_p2) and not((ap_const_lv1_0 = tmp_8_reg_342)))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_107_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_107 <= (ap_const_lv1_1 = ap_CS_fsm(4 downto 4));
    end process;


    ap_sig_22_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_22 <= (ap_CS_fsm(0 downto 0) = ap_const_lv1_1);
    end process;


    ap_sig_52_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_52 <= (ap_const_lv1_1 = ap_CS_fsm(1 downto 1));
    end process;


    ap_sig_69_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_69 <= (ap_const_lv1_1 = ap_CS_fsm(2 downto 2));
    end process;


    ap_sig_84_assign_proc : process(ap_CS_fsm)
    begin
                ap_sig_84 <= (ap_const_lv1_1 = ap_CS_fsm(3 downto 3));
    end process;


    ap_sig_cseq_ST_st1_fsm_0_assign_proc : process(ap_sig_22)
    begin
        if (ap_sig_22) then 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st1_fsm_0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st2_fsm_1_assign_proc : process(ap_sig_52)
    begin
        if (ap_sig_52) then 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st2_fsm_1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st3_fsm_2_assign_proc : process(ap_sig_69)
    begin
        if (ap_sig_69) then 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st3_fsm_2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st4_fsm_3_assign_proc : process(ap_sig_84)
    begin
        if (ap_sig_84) then 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st4_fsm_3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_cseq_ST_st5_fsm_4_assign_proc : process(ap_sig_107)
    begin
        if (ap_sig_107) then 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_1;
        else 
            ap_sig_cseq_ST_st5_fsm_4 <= ap_const_logic_0;
        end if; 
    end process;

    demorgan_fu_277_p2 <= (slt_fu_271_p2 and tmp_4_reg_352);
    dist_0_s_fu_190_p3 <= 
        dist_fu_184_p2 when (r_V_fu_180_p1(0) = '1') else 
        val_assign_reg_105;
    dist_fu_184_p2 <= std_logic_vector(unsigned(ap_const_lv32_1) + unsigned(val_assign_reg_105));
    exitcond_fu_168_p2 <= "1" when (i_reg_117 = ap_const_lv6_31) else "0";
    i_1_fu_174_p2 <= std_logic_vector(unsigned(i_reg_117) + unsigned(ap_const_lv6_1));
    i_2_fu_218_p2 <= std_logic_vector(unsigned(i1_reg_128) + unsigned(ap_const_lv2_1));

    min_distances_V_address0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, min_distances_V_addr_reg_337, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4, tmp_13_cast_fu_233_p1, tmp_14_cast_fu_256_p1)
    begin
        if ((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4)) then 
            min_distances_V_address0 <= min_distances_V_addr_reg_337;
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3)) then 
            min_distances_V_address0 <= tmp_14_cast_fu_256_p1(5 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2)) then 
            min_distances_V_address0 <= tmp_13_cast_fu_233_p1(5 - 1 downto 0);
        else 
            min_distances_V_address0 <= "XXXXX";
        end if; 
    end process;


    min_distances_V_ce0_assign_proc : process(ap_sig_cseq_ST_st3_fsm_2, ap_sig_cseq_ST_st4_fsm_3, ap_sig_cseq_ST_st5_fsm_4)
    begin
        if (((ap_const_logic_1 = ap_sig_cseq_ST_st3_fsm_2) or (ap_const_logic_1 = ap_sig_cseq_ST_st4_fsm_3) or (ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4))) then 
            min_distances_V_ce0 <= ap_const_logic_1;
        else 
            min_distances_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    min_distances_V_d0 <= val_assign_reg_105(6 - 1 downto 0);

    min_distances_V_we0_assign_proc : process(tmp_5_reg_327, tmp_8_reg_342, ap_sig_cseq_ST_st5_fsm_4, or_cond_fu_288_p2, demorgan_fu_277_p2)
    begin
        if ((((ap_const_logic_1 = ap_sig_cseq_ST_st5_fsm_4) and (((ap_const_lv1_0 = tmp_5_reg_327) and not((ap_const_lv1_0 = or_cond_fu_288_p2))) or ((ap_const_lv1_0 = tmp_5_reg_327) and (ap_const_lv1_0 = demorgan_fu_277_p2) and not((ap_const_lv1_0 = tmp_8_reg_342))))))) then 
            min_distances_V_we0 <= ap_const_logic_1;
        else 
            min_distances_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    or_cond_fu_288_p2 <= (tmp_8_reg_342 and tmp_1_fu_282_p2);
    r_V_2_fu_162_p2 <= (train_inst_V_cast_fu_158_p1 xor test_inst_V);
    r_V_3_fu_198_p4 <= p_s_reg_96(48 downto 1);
    r_V_4_fu_208_p1 <= std_logic_vector(resize(unsigned(r_V_3_fu_198_p4),49));
    r_V_fu_180_p1 <= p_s_reg_96(1 - 1 downto 0);
    slt_fu_271_p2 <= "1" when (signed(val_assign_reg_105) < signed(tmp_2_fu_267_p1)) else "0";
        tmp_13_cast_fu_233_p1 <= std_logic_vector(resize(signed(tmp_3_fu_228_p2),64));

        tmp_14_cast_fu_256_p1 <= std_logic_vector(resize(signed(tmp_6_fu_251_p2),64));

    tmp_1_fu_282_p2 <= "1" when (i1_reg_128 = ap_const_lv2_2) else "0";
    tmp_2_fu_267_p1 <= std_logic_vector(resize(unsigned(min_distances_V_q0),32));
    tmp_34_cast_cast_fu_140_p1 <= std_logic_vector(resize(unsigned(tmp_34),6));
    tmp_3_fu_228_p2 <= std_logic_vector(unsigned(tmp_s_reg_298) + unsigned(tmp_6_cast_fu_224_p1));
    tmp_4_fu_261_p2 <= "0" when (min_distances_V_q0 = ap_const_lv6_32) else "1";
    tmp_5_fu_212_p2 <= "1" when (i1_reg_128 = ap_const_lv2_3) else "0";
    tmp_6_cast_fu_224_p1 <= std_logic_vector(resize(unsigned(i1_reg_128),6));
    tmp_6_fu_251_p2 <= std_logic_vector(unsigned(tmp_s_reg_298) + unsigned(tmp_cast_fu_248_p1));
    tmp_7_fu_238_p1 <= std_logic_vector(resize(unsigned(min_distances_V_q0),32));
    tmp_8_fu_242_p2 <= "1" when (signed(val_assign_reg_105) < signed(tmp_7_fu_238_p1)) else "0";
    tmp_cast_fu_248_p1 <= std_logic_vector(resize(unsigned(i_2_reg_331),6));
    tmp_fu_144_p3 <= (tmp_34 & ap_const_lv2_0);
    tmp_s_fu_152_p2 <= std_logic_vector(unsigned(tmp_fu_144_p3) - unsigned(tmp_34_cast_cast_fu_140_p1));
    train_inst_V_cast_fu_158_p1 <= std_logic_vector(resize(unsigned(train_inst_V),49));
end behav;
